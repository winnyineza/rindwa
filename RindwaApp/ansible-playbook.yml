---
- name: Deploy Fitness Booking Application
  hosts: all
  become: yes
  vars:
    app_name: fitness-booking
    docker_compose_version: "2.20.0"
    docker_images:
      - "{{ dockerhub_username }}/fitness-booking-backend:latest"
      - "{{ dockerhub_username }}/fitness-booking-frontend:latest"
    app_port: 8080  # Unique port for this application
    db_port: 5433   # Unique database port
    
  tasks:
    - name: Update package cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
      when: ansible_os_family == "Debian"

    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - python3-pip
          - git
        state: present
      when: ansible_os_family == "Debian"

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      when: ansible_os_family == "Debian"

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
      when: ansible_os_family == "Debian"

    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
      when: ansible_os_family == "Debian"

    - name: Install Docker Compose
      get_url:
        url: "https://github.com/docker/compose/releases/download/v{{ docker_compose_version }}/docker-compose-{{ ansible_system }}-{{ ansible_architecture }}"
        dest: /usr/local/bin/docker-compose
        mode: '0755'

    - name: Create application directory
      file:
        path: /opt/{{ app_name }}
        state: directory
        mode: '0755'

    - name: Copy docker-compose.yml
      copy:
        src: docker-compose.yml
        dest: /opt/{{ app_name }}/docker-compose.yml
        mode: '0644'

    - name: Create environment file
      template:
        src: env.j2
        dest: /opt/{{ app_name }}/.env
        mode: '0600'

    - name: Create nginx configuration directory
      file:
        path: /opt/{{ app_name }}/nginx
        state: directory
        mode: '0755'

    - name: Copy nginx configuration
      copy:
        src: nginx/nginx.conf
        dest: /opt/{{ app_name }}/nginx/nginx.conf
        mode: '0644'

    - name: Create SSL directory
      file:
        path: /opt/{{ app_name }}/nginx/ssl
        state: directory
        mode: '0755'

    - name: Pull latest Docker images
      docker_image:
        name: "{{ item }}"
        source: pull
      loop: "{{ docker_images }}"

    - name: Stop existing containers
      docker_compose:
        project_src: /opt/{{ app_name }}
        state: absent
      ignore_errors: yes

    - name: Start application with docker-compose
      docker_compose:
        project_src: /opt/{{ app_name }}
        state: present
        build: yes

    - name: Wait for services to be ready
      wait_for:
        port: "{{ app_port }}"
        timeout: 300
      delegate_to: localhost

    - name: Check application health
      uri:
        url: "http://{{ ansible_default_ipv4.address }}:{{ app_port }}"
        method: GET
        status_code: 200
      register: health_check
      retries: 5
      delay: 10
      until: health_check is succeeded

    - name: Display deployment status
      debug:
        msg: "Application deployed successfully on port {{ app_port }}" 